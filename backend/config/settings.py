"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# 构建项目路径
BASE_DIR = Path(__file__).resolve().parent.parent

# 加载环境变量文件
load_dotenv(os.path.join(BASE_DIR, '.env'))


# 快速开发设置 - 不适合生产环境
# 参见 https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# 安全警告：在生产环境中保持密钥的秘密性！
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-z+co#&rm$ljd-x&)0olf9sha81&6g0wc^3w(%7%4r)lap(eg7u')

# 安全警告：在生产环境中不要开启调试模式！
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# 允许的主机列表
ALLOWED_HOSTS = ['*']  # 开发环境允许所有主机，生产环境应该设置具体域名


# 应用程序定义

INSTALLED_APPS = [
    'django.contrib.admin',  # Django管理后台
    'django.contrib.auth',   # 认证系统
    'django.contrib.contenttypes',  # 内容类型框架
    'django.contrib.sessions',  # 会话框架
    'django.contrib.messages',  # 消息框架
    'django.contrib.staticfiles',  # 静态文件管理
    'rest_framework',  # Django REST框架
    'corsheaders',  # 跨域资源共享
    'api',  # 自定义API应用
]

# 中间件配置
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS中间件
    'django.middleware.security.SecurityMiddleware',  # 安全中间件
    'django.contrib.sessions.middleware.SessionMiddleware',  # 会话中间件
    'django.middleware.common.CommonMiddleware',  # 通用中间件
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF保护中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 认证中间件
    'django.contrib.messages.middleware.MessageMiddleware',  # 消息中间件
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # 点击劫持保护中间件
]

# URL配置根文件
ROOT_URLCONF = 'config.urls'

# 模板配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI应用配置
WSGI_APPLICATION = 'config.wsgi.application'


# 数据库配置
# 参见 https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # SQLite数据库引擎
        'NAME': BASE_DIR / 'db.sqlite3',  # 数据库文件路径
    }
}


# 密码验证配置
# 参见 https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# 国际化配置
# 参见 https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 中文简体

TIME_ZONE = 'Asia/Shanghai'  # 上海时区

USE_I18N = True  # 启用国际化

USE_TZ = True  # 启用时区支持


# 静态文件配置 (CSS, JavaScript, Images)
# 参见 https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# 默认主键字段类型
# 参见 https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS配置 - 允许所有来源的跨域请求
CORS_ALLOW_ALL_ORIGINS = True

# AI API配置
# Coze API相关配置，从环境变量中读取
COZE_API_KEY = os.getenv('COZE_API_KEY', '')  # Coze API密钥
COZE_API_URL = os.getenv('COZE_API_URL', 'https://api.coze.cn/v3/chat')  # Coze API地址
COZE_BOT_ID = os.getenv('COZE_BOT_ID', '')  # Coze机器人ID
COZE_USER_ID = os.getenv('COZE_USER_ID', '123456789')  # Coze用户ID